// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String   @id @default(cuid())
    discordId     String   @unique
    discordTag    String
    minecraftUuid String?  @unique
    minecraftName String?
    isVerified    Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    authTokens    AuthToken[]
    verifications Verification[]

    @@map("users")
}

model AuthToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    expiresAt DateTime
    isUsed    Boolean  @default(false)
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("auth_tokens")
}

model Verification {
    id               String             @id @default(cuid())
    userId           String
    minecraftUuid    String
    minecraftName    String
    status           VerificationStatus @default(PENDING)
    verificationCode String             @unique
    expiresAt        DateTime
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("verifications")
}

model MinecraftServer {
    id        String   @id @default(cuid())
    name      String
    host      String
    port      Int      @default(25565)
    apiKey    String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("minecraft_servers")
}

model AuditLog {
    id        String   @id @default(cuid())
    action    String
    userId    String?
    details   Json?
    ipAddress String?
    userAgent String?
    createdAt DateTime @default(now())

    @@map("audit_logs")
}

enum VerificationStatus {
    PENDING
    COMPLETED
    EXPIRED
    FAILED
}
